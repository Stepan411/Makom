<!DOCTYPE html>
<html>
  <head>
    <title>Google Maps & D3.js Example</title>
    <style>
 #map { height: 100vh; }

 
      #slider {
        margin-top: 20px;
        margin-left: 50px;
        margin-right: 50px;
      }

   #floating-panel {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 5;
    display: block;
    background: #2db700;
    color: #fff;
    text-decoration: none;
    padding: 6px 23px;
    font-size: 17px;
    }
   #floating-panel:hover {
    background: #222;
    }

.fixedbut {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 5;
    display: block;
    background: #2db700;
    color: #fff;
    text-decoration: none;
    padding: 6px 23px;
    font-size: 15px;
    cursor: move;
    width: 325px; /* фіксована ширина */
    height: 76px; /* фіксована висота */
    }
   .fixedbut:hover {
    background: #222;
    }

    </style>
  </head>
  <body>
    <div id="map"></div>
  <div class="fixedbut">
<div id="myDiv"></div>
</div>

    <div id="values-slider"></div>
    <div id="slider"></div>

    <div id="floating-panel">
<button id="startButton" class="btn btn-primary btn-sm">Старт</button>
<button id="stopButton" class="btn btn-info btn-sm">Стоп</button>
<a href="/" class="btn btn-warning btn-sm">Вихід</a>
    </div>


    <!--
<script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY"></script>
<script src="https://d3js.org/d3.v6.min.js"></script>
-->
<script src="https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyBi83mZ1Jd1UxsupafGhlswoUPGk3Iy1GM&language=uk&libraries=geometry&callback=initMapi"></script>

<script src="/javascripts/nouislider.min.js"></script>
<link href="/css/nouislider.min.css" rel="stylesheet">
<div class="noUiSlider"></div><br>
    <script>
      // Initialize the Google Map
      function initMap() {
var isSimulating = true;
var startButton = document.getElementById('startButton');
var stopButton = document.getElementById('stopButton');

//startButton.addEventListener('click', startSimulation);
stopButton.addEventListener('click', stopSimulation);

	      /*
	      function startSimulation() {
  isSimulating = true;
console.log('isSimulating_start)=' +isSimulating);		      j=0;
		     var time_day=0;				// такт часу доби - старт з часу вибраного графіка  
		      animateBus(k, 0, 0, markers, tabls);
}
*/
function stopSimulation() {
	console.log('isSimulating_stop)=' +isSimulating);
  isSimulating = false;
}


//--------------------- Створення fixedbut - drag end drob -----------------------------------------------------
var fixedbut = document.querySelector('.fixedbut');
var isDragging = false;
var offset = {
  x: 0,
  y: 0
};
var width = fixedbut.offsetWidth; // отримати ширину елемента
var height = fixedbut.offsetHeight; // отримати висоту елемента

fixedbut.addEventListener('mousedown', function(event) {
  isDragging = true;
  offset.x = event.clientX - fixedbut.offsetLeft;
  offset.y = event.clientY - fixedbut.offsetTop;
});

document.addEventListener('mousemove', function(event) {
  if (!isDragging) {
    return;
  }
  fixedbut.style.left = (event.clientX - offset.x) + 'px';
  fixedbut.style.top = (event.clientY - offset.y) + 'px';
  fixedbut.style.width = width + 'px'; // заблокувати зміну ширини
  fixedbut.style.height = height + 'px'; // заблокувати зміну висоти
});

document.addEventListener('mouseup', function() {
  isDragging = false;
});

//-------------------------------- Створення noUiSlider - лінії часу ------------------------------------------------------
var arr2 = [];
[% FOREACH stop2 IN track %]
    var obj2 = {};
  obj2.num_next_segment = [% stop2.num_next_segment %],
  obj2.lng = [% stop2.lng %], 
  obj2.id_station = [% stop2.id_station %],
  obj2.id = [% stop2.id %],
//  obj2.distance_stops = [% stop2.distance_stops %],
  obj2.radio_pzz = [% stop2.radio_pzz %],
  obj2.distance_line = [% stop2.distance_line %],
  obj2.lat = [% stop2.lat %],
//  obj.distance_line_two = [% stop2.distance_line_two %],
    arr2.push(obj2); 
                [% END %]

var track_ss = arr2;

	      var valuesSlider = document.getElementById('values-slider');
var valuesForSlider = [0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,00]; // 16 values

var format = {
    to: function(value) {
        return valuesForSlider[Math.round(value)];
    },
    from: function (value) {
        return valuesForSlider.indexOf(Number(value));
    }
};
noUiSlider.create(valuesSlider, {
    start: [5, 22],
    // A linear range from 0 to 23 (16 values)  
    range: { min: 0, max: valuesForSlider.length - 1 },
    // steps of 1
    step: 1,
    tooltips: true,
    format: format,
    pips: { mode: 'steps', format: format },
}); 
// The display values can be used to control the slider
valuesSlider.noUiSlider.set(['5','22']);
var values = valuesSlider.noUiSlider.get();
//console.log('s'+values);
var currentValue;

valuesSlider.noUiSlider.on('update', function(values, handle) {
  	currentValue = valuesSlider.noUiSlider.get();
	currentValue[0] = currentValue[0] * 3600;
	currentValue[1] = currentValue[1] * 3600;
	console.log('sd'+currentValue); 
}); 
console.log('sd2'+currentValue); 
//------------------------- Приймання інфи з сервера ----------------------------------------------

var track_line = [];
var a = 0;
[% FOREACH i = track_l %]
        track_line[a] = [% i %]
        a = a +1;
[% END %]
var track_line_ss = JSON.stringify(track_line);   	// рядкове значеення
track_line_ss = JSON.parse(track_line_ss);		// обєкт

const path_vv = track_line_ss.map(coord => ({		// перетворюєм в числове
  lat: Number(coord.lat),
  lng: Number(coord.lng),
  id_station: Number(coord.id_station),
  name: coord.name, 
  distance_line: Number(coord.distance_line),
  distance_line_two: Number(coord.distance_line_two)
}));

//var index =0;
// for (j = 0; j < path_vv.length; j++) {
//console.log('j='+j,'id_p='+ path_vv[j].distance_line, path_vv[j].distance_line_two, path_vv[j].id_station, path_vv[j].name);
//     }
var table_v = [];
var a = 0;
[% FOREACH i = table %]
        table_v[a] = [% i %]
        a = a +1;
[% END %]

var table_ss = JSON.parse(JSON.stringify(table_v));
var stops = [];
var a = 0;
[% FOREACH i = stop_s %]
       stops[a] = [% i %]
        a = a +1;
[% END %]
var stops_ss = JSON.parse(JSON.stringify(stops));

var sh = [];
var a = 0;
[% FOREACH i = schedule_s %]
       sh[a] = [% i %]
        a = a +1;
[% END %]
var schedules = JSON.parse(JSON.stringify(sh));
 console.log(schedules[0].schedules_max);

 a = 0;
var din =[];
[% FOREACH i = diners %]
       din[a] = [% i %]
        a = a +1;
[% END %]
var diners_ss = JSON.parse(JSON.stringify(din));
// console.log(diners_ss[0].start_time, diners_ss[0].start_time, diners_ss[0].end_time);

//------------------ Центрування карти по групі маркерів ----------------------------------------------------
console.log(stops_ss[0].lat, stops_ss[0].lng, stops_ss[0].name, stops_ss[0].time, stops_ss[0].station_id);
// Отримуємо межі (границі) всіх маркерів
var bounds = new google.maps.LatLngBounds();
stops_ss.forEach(function(stops_ss) {
   bounds.extend(new google.maps.LatLng(stops_ss.lat, stops_ss.lng));
}); 
//Отримуємо центр меж 
var center = bounds.getCenter(); 
// Налаштовуємо параметри карти 
var mapOptions = {
  zoom: 13,
  center: center,
  mapTypeId: "terrain"
};
// Створюємо карту з центруванням по групі маркерів
var map = new google.maps.Map(document.getElementById("map"), mapOptions);

// Додаємо маркери на карту
stops_ss.forEach(function(stops_ss) {
  new google.maps.Marker({
    position: new google.maps.LatLng(stops_ss.lat, stops_ss.lng),
    icon: '/images/bus2_stops2.png',
    title: stops_ss.name,
    map: map
  });
});
//-------------------------------- В залежності від довжини відрізків/віддалі між зупинками і швидкости симуляції вираховуємо к-сть додаткових точок на лінії ------------------ 

// for (j = 0; j < stops_ss.length; j++) {
//console.log('j='+j,'id_st='+stops_ss[j].station_id, stops_ss[j].name);
//     }


for (i = 0; i < stops_ss.length - 1; i++) {
  // console.log('ss=' +i, stops_ss[i].station_id, stops_ss[i].time);
    for (j = 0; j < path_vv.length - 1; j++) {
     if (stops_ss[i].station_id == path_vv[j].id_station){
path_vv[j].time = stops_ss[i].time;
stops_ss[i].lat = path_vv[j].lat;
stops_ss[i].lng = path_vv[j].lng;
stops_ss[i].distance_line = path_vv[j].distance_line;
stops_ss[i].distance_line_two = path_vv[j].distance_line_two;
  //   console.log('o=' +i, 'j='+j, 'id_t='+stops_ss[i].station_id, 'id_p='+path_vv[j].id_station, path_vv[j].name, 'time_t='+stops_ss[i].time, 'time_p='+path_vv[j].time, stops_ss[i].distance_line, stops_ss[i].distance_line_two);

       	var time_dist = stops_ss[i+1].time - stops_ss[i].time;
        var segment = stops_ss[i].distance_line_two - stops_ss[i].distance_line;
        var v_segment = segment/time_dist;
        var Vstops = v_segment.toFixed(2);
     	var Sstops = segment.toFixed(2);
//console.log('v=' +segment, time_dist, v_segment,Vstops, stops_ss[i].name  );
	var s = path_vv[j].distance_line_two;
    	var interest = 0;
	var c=0;
    	var nextStop = path_vv[j];

                while( s > path_vv[j].distance_line){
                                        var next_segment = path_vv[j+1].distance_line - path_vv[j].distance_line;
                                        interest = next_segment * 100 /segment;

			     		var numSteps_segment = time_dist;   // 25 кадрів в сек. - це кількість анімації в сек.
    					let  num_next_segmen_t = numSteps_segment * interest/100;   // к-сть кроків анімації на N відрізку сегмента

					var num_next_segment = parseFloat(Math.floor(num_next_segmen_t)); // заокруглення до меншого цілого числа
     					if (num_next_segment == 0) {
                                                num_next_segment = 1;
                                        }
					path_vv[j].num_next_segment = num_next_segment;
					path_vv[j].v_stops = Vstops;
					path_vv[j].s_stops = Sstops;
				//	console.log('num=' +  path_vv[j].num_next_segment, j, c,'V='+v_segment, Vstops, 'S='+segment,'I='+interest,'N='+next_segment  );

        c++;
        j++;
                }
//console.log('ok=' +i, 'j='+j, 'c='+c, 'id_t='+stops_ss[i].station_id, 'id_p='+path_vv[j].id_station, 'time_t='+table_ss[i].time, 'time_p='+path_vv[j].time, stops_ss[i].distance_line, path_vv[j].num_next_segment, stops_ss[i].distance_line_two);
     }
     }
     }
//---------------------------------- Створення битої - дрібненько - лінії -----------------------------------------------
c=0;
i=0;
var t_path = [];
     for (j = 0; j < path_vv.length - 1; j++) {
var nextStop = path_vv[j];
     path_vv[j].s_stops = path_vv[j].s_stops ?? 0; // якщо undefined то 0 
     
 t_path[i] = {id: i, lat: path_vv[j].lat, lng: path_vv[j].lng, name: path_vv[j].name, id_station: path_vv[j].id_station, time: path_vv[j].time, distance_line: path_vv[j].distance_line, distance_line_two: path_vv[j].distance_line_two, v_stops: path_vv[j].v_stops, s_stops: path_vv[j].s_stops};
//console.log('oki=' +i, t_path[i].v_stops, t_path[i].s_stops, t_path[i].name);
     // розрахунок координат маркера в кожному кроці анімації

	var numSteps = path_vv[j].num_next_segment; // кількість кроків анімації
	var step1 = 0; // поточний крок анімації
	let deltaLat = (path_vv[j+1].lat - nextStop.lat) / numSteps; // різниця між початковим та кінцевими значеннями широти
	let deltaLng = (path_vv[j+1].lng - nextStop.lng) / numSteps; // різниця між початковим та кінцевими значеннями довготи
let lat_f = parseFloat(nextStop.lat);
let lng_f = parseFloat(nextStop.lng);
            let lat_d = parseFloat(deltaLat);
                let lng_d = parseFloat(deltaLng);
     // запуск анімації
animateMarker();
function animateMarker() {
  	if (step1 < numSteps) {
		lat_f = lat_f + lat_d;
		lng_f = lng_f + lng_d;
	  		lat =  lat_f;
	  		lng =  lng_f;
     step1++; 
     i++; 
t_path[i] = {id: i, lat: lat, lng: lng, time: 0, distance_line: 0, distance_line_two: 0,id_station: 0, v_stops: 0, s_stops: 0, name: ''};

//console.log('o=' +i, 'j='+j, 'c='+c,step1, step1, numSteps, t_path[i].lat, t_path[i].name ); 
	animateMarker();

}
}
i++; 
c++;
//console.log('ok=' +i, 'j='+j, 'c='+c, 'time_p='+path_vv[j].id_station, path_vv[j].time, path_vv[j].num_next_segment, path_vv[j].distance_line, path_vv[j].lat, path_vv[j].lng, path_vv[j].s_stops, path_vv[j].s_stops);
     }
var point_t_t = t_path.length;
var point_t_vv = path_vv.length;
var stops_vv = stops_ss.length;
console.log('point_t_t='+point_t_t,'point_t_vv='+point_t_vv, 'stops_vv='+stops_vv);
//----------------------------------------- Масив масивів графіків --------------------------------------
 var tabls = [];  // Масив для зберігання масивів графіків маршруту
for (var p = 0; p < schedules.length; p++) {     
var tabl = [];
for (i = 0; i < table_ss.length - 1; i++) {					// Для вибору часу графіка
     if ( table_ss[i].schedules_id ===  schedules[p].schedules_max) {
		tabl.push(table_ss[i]);						// Вибірка графіків у мас. 
//     console.log('i=' +i,tabl[p].time, tabl[p].schedules_id);
}
     }
     tabls.push(tabl);								// збираємо масив графіків tabl у масив tabls
     }
// Отримати доступ до time 
/*
var timeValue = tabls[0][0].time;
console.log('mmm='+ timeValue, diners_ss[0].schedules_id, schedules[0].schedules_max); // Вивести значення time
let g=7;
for (i = 0; i < tabls[g].length; i++) {

	var totalSeconds = tabls[g][i].time;
var hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
var minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
var seconds = String(totalSeconds % 60).padStart(2, '0');
const line_time = `${hours}:${minutes}:${seconds} год.`
console.log(i,'stations_id='+ tabls[g][i].stations_id,line_time,'time='+ tabls[g][i].time,'schedules_id='+ tabls[g][i].schedules_id);
}
*/
//-------------------------------- Запис обідів в графіки --------------------------------------------------
for (i = 0; i < schedules.length; i++) {
for (j = 0; j < tabls[i].length; j++) {
                        tabls[i][j].start_time_diner = 0;
                        tabls[i][j].end_time_diner = 0;
                        tabls[i][j].duration_diner = 0;
			tabls[i][j].stations_id_diner = 0;

	for (let m = 0; m < diners_ss.length; m++) {
		if (tabls[i][j].stations_id === diners_ss[m].stations_id && diners_ss[m].schedules_id === schedules[i].schedules_max && diners_ss[m].start_time === tabls[i][j].time) {
//console.log('i=' +i, j, tabls[i][j].stations_id, tabls[i][j].time, diners_ss[m].stations_id, diners_ss[m].start_time);
			tabls[i][j].start_time_diner = diners_ss[m].start_time;
			tabls[i][j].end_time_diner = diners_ss[m].end_time;
			tabls[i][j].duration_diner = diners_ss[m].duration;
     			tabls[i][j].stations_id_diner = diners_ss[m].stations_id; 
     console.log('i=' +i, j, tabls[i][j].stations_id_diner,'tabls_end='+tabls[i][j].end_time_diner,'tabls_start='+tabls[i][j].start_time_diner);
		}
		}
}
}
//---------------------------- Запис к-сті точок між зупинками - для обідів ------------------------------------------------
for (let i = 0; i < t_path.length - 1; i++) {
t_path[i].point = 0;

  const currentStationId = t_path[i].id_station;
  
  if (currentStationId !== 0) {
    let nextIndex = i + 1;
    let nextStationId = t_path[nextIndex].id_station;
    
    while (nextStationId === 0 && nextIndex < t_path.length - 1) {
      nextIndex++;
      nextStationId = t_path[nextIndex].id_station;
    }
    
    if (nextStationId !== 0) {
      const indexDifference = nextIndex - i;
      t_path[i].point = indexDifference; 
    }
  }
}

//-------------------------------- Загальні параметри --------------------------------------------------
var T_stops = 25;		// час зупинки на зупинці в с.
var point_t = t_path.length;							// для розрахунку ціни поділки в часі та інших хар. лінії
var lastIndexD = path_vv.length - 1; 
var lastDist = path_vv[lastIndexD].distance_line;
	var lastIndex2 = stops_ss.length - 1;
     	var lastTime_line = stops_ss[lastIndex2].time;
     	var firstTime_line = stops_ss[0].time;
	var lastStatioins = stops_ss[lastIndex2].station_id;
	var firstStatioins = stops_ss[0].station_id;
const indexLastSt = t_path.findIndex(item => item.id_station === lastStatioins);		// визначення точок від зупинки до кінця треку для обідів
const indexFirstSt = t_path.findIndex(item => item.id_station === firstStatioins);		// визначення точок від зупинки до початку треку
var point_last_sum = point_t - indexLastSt + indexFirstSt; 						// загальна к-сть точок

//console.log('indexLastSt:', indexLastSt, point_last_sum,  lastStatioins);
//console.log('indexFirstSt:', indexFirstSt, firstStatioins);


var totalSeconds = lastTime_line - firstTime_line;
var hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
var minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
var seconds = String(totalSeconds % 60).padStart(2, '0');
const line_time = `${hours}:${minutes}:${seconds} год.`
     var v_line_m = lastDist / totalSeconds ;
     var v_line_km = v_line_m * 3.6;
                v_line_km = v_line_km.toFixed(2);
     var division_price = (lastTime_line - firstTime_line) / point_t;       // оприділяємо ціну поділки в часі на лінії для заданої швидкості анімації
console.log('o=' +i,'j='+j,'c='+c,'pt=' +point_t,'Tmin=' +firstTime_line,'Tmax=' +lastTime_line,'total_sec='+ totalSeconds,'lastDist=' +lastDist, division_price,'id_st='+lastStatioins );
//------------------------------------ Точка старту І графіка точка к ---------------------------------------------------- 
var id_station = null;  
var k=0;  
var f=0;  
for ( i = 0; i < tabls[0].length; i++) {                        // точка старта 1 графіка

  for (k = 0; k < t_path.length; k++) {
//     console.log( i,j, tabls[0][i].stations_id, t_path[j].id_station);
    if (tabls[0][i].stations_id === t_path[k].id_station) {
//     f=i;
      id_station = tabls[0][i].id_station;
     console.log('aaa'+id_station, i,k, f, t_path[k].id_station, t_path[k].name, );
      break;
    }
  f++;
     }

  if (id_station !== null) {
     f=i;
    break;
  }
}

console.log(id_station, i,k, f);
     

//------------- Вибір точок старту всіх крім І графіка -----------------------------
var start_point = [];
var indexFirstStation = [];
var firstSt =0;
for (let i = 1; i < tabls.length; i++) {

var start_time = tabls[i][0].time - tabls[0][0].time;
var start_point_n = point_t * start_time/totalSeconds;                          // точка старту по часу  на t_path відносно k (point_t - totalSeconds... пропорція... Х - start_time ) Х =...
start_point[i] = Math.round(start_point_n);
var start_point_І = k;                  // точка початку анімації другого маркера


        firstSt = tabls[i][0].stations_id;
indexFirstStation[i] = t_path.findIndex(item => item.id_station === firstSt);   // точка старту по id зупинки на t_path


        var startSeconds = start_time;
var hours = String(Math.floor(startSeconds / 3600)).padStart(2, '0');
var minutes = String(Math.floor((startSeconds % 3600) / 60)).padStart(2, '0');
var seconds = String(startSeconds % 60).padStart(2, '0');
const line_time = `${hours}:${minutes}:${seconds} год.`;

 console.log(i,'start='+start_time,point_t,start_point_n,totalSeconds,'start_point[i]'+start_point[i],line_time,firstSt,'ind_Fi_st='+indexFirstStation[i], tabls[i][0].time, tabls[i][0].schedules_id);
     } 
//------------------------- Присвоєння tabls[i][j].name ---------------------------------------------------------
for (let i = 0; i < tabls.length; i++) {
  for (let j = 0; j < tabls[i].length; j++) {
    const stationId = tabls[i][j].stations_id;
    const stop = stops_ss.find(stop => stop.station_id === stationId);
    if (stop) {
      tabls[i][j].name = stop.name;
//console.log('name' +tabls[i][j].name);
    }
  }
}
//------------------------- Створюємо Polyline з масиву точок path_vv  ---------------------------------------------------------
var polyline = new google.maps.Polyline({
  path: path_vv, 
  strokeColor: '#FF0000', 
  strokeOpacity: 1.0, 
  strokeWeight: 2,
     map: map, 
}); 
// Додаємо Polyline на мапу 
polyline.setMap(map);  
const count = t_path.length;  
console.log('okkk=' +count);    
//------------------------------------------ Маркера ------------------------------------------------------------
c=0;          
i=0;   
j=0;   
// Створити об'єкт для зберігання маркерів 
const markers = {}; 
for (let i = 0; i < tabls.length; i++) {
    const marker = new google.maps.Marker({
      position: new google.maps.LatLng(tabls[i][0].lat, tabls[i][0].lng),
      map: map,
      label: {
        text: String(i+1),									// Графіки починаються з 1 графіка а не 0
      },
    });
    // Зберегти маркер за його індексом 
    markers[`marker_${i}`] = marker;
}
		let progress_11 = 557;
		let point_11 = t_path[progress_11];
		markers.marker_0.setPosition(point_11);

//----------------------------------------- Симуляція ---------------------------------------------------------------------------
//function simulationBus(time_day) {

var bus_num = 5;

var time_day=0;				// такт часу доби - старт з часу вибраного графіка  
var storedDin = new Array(bus_num).fill(0);
var storedMarker_on = new Array(bus_num).fill(0);
var storedCycle = new Array(bus_num).fill(0);
var prostitute=0;

var start_diner_2 = new Array(5).fill(0);							// накопичення/оприділення к-сті точок затримки
var sim_step_2 = new Array(5).fill(0);								// к-сть точок затримки
var progress_stop_2 = new Array(5).fill(0);							// зберігає значення progress_2 до обіду
var sim_step_step_2 = new Array(5).fill(0);
var point_diner_2 = new Array(5).fill(0);							// к-сть точок обіду
var lastSt_2 = new Array(5).fill(0); 
var progress_2 = new Array(5).fill(0);
var updating_din = new Array(5).fill(0);							// присвоює та віднімає к-сть точок затримки обіду графіка tabls[r][din].time
var updating_din_off = new Array(5).fill(0);							// відключає можливість віднімання к-сть точок затримки обіду графіка tabls[r][din]...
var updating_prog_off = new Array(5).fill(0);							// відключає можливість віднімання к-сть точок затримки обіду маркера t_path[progress_2[r]]...
var updating_prog = new Array(5).fill(0);							// присвоює та віднімає к-сть точок затримки обіду маркера t_path[progress_2[r]]...
let stop_din = 0;
let start_mark = 0;

function simulationBus(time_day) {
	
	function simulat(){

		return function simulat(time_day, m, start_point, w, r, markers, tabls) {
			progress_2[r]  = time_day - start_point[m] - t_path.length * storedCycle[r] - updating_din[r] - updating_prog[r] + start_mark;
			if (progress_2[r] < 0 ) {
				if (progress_2[r] === -1 ) {
start_mark  = indexFirstStation[m];
			}
			}
			let as = t_path.length * storedCycle[r];
	if (progress_2[r]>= indexFirstStation[m]) { 						// перший старт з зупинки старту
              storedMarker_on[r] = 1;                             				// storedMarker_on[r] якщо 1 то затримка симуляції маркера до точки старту

	}
//	console.log(r,'td='+time_day,'sp='+start_point[m],'pr='+progress_2[r],'as='+as,updating_din[r],'in='+indexFirstStation[m],'st='+storedMarker_on[r], start_mark);
if ((progress_2[r]>= indexFirstStation[m] ) || storedMarker_on[r] ===1) {

	if (prostitute != r) {									// prostitute відповідає за відновлення din після зміни графіка 
		din = storedDin[r];								// storedValue[r] відповідає за збереження та відновлення din після зміни графіка
		prostitute = r;
	}
	let point_2 = t_path[progress_2[r]];
	        if ( progress_2[r] >= t_path.length) {
			storedCycle[r]++;							// додає + до оборотного рейсу
			progress_2[r] = 0; 
        	}    
//	let stop_din = storedDin[r]; 
//	let updating_din_off = 0; 
if (t_path[progress_2[r]] && t_path[progress_2[r]].id_station){					// знаходження зупинок
 let stop_step_2=0; 
		tabls[r][din].stations_id_diner = tabls[r][din].stations_id_diner ?? 0; 			// якщо undefined то 0 
//-------------------------- Обід -------------------------------------------------------------------------  
	if (t_path[progress_2[r]].id_station === tabls[r][din].stations_id_diner ) { 				// зупинка обіду
		stop_step_2 = tabls[r][din].end_time_diner - tabls[r][din].start_time_diner;  // Цикл часу затримки на зупинці
		progress_stop_2[r] = progress_2[r];  
		point_diner_2[r] = t_path[progress_2[r]].point;
		lastSt_2[r] = 0; 
	if (lastStatioins === t_path[progress_2[r]].id_station) {
				lastSt_2[r] = 1;                                                             // зупинка кінцева обіду на t_path
				updating_prog_off[r] = 1;						     // включення можливості відключення t_path[progress_2[r]].
	}else{
				lastSt_2[r] = 0;                                                             // зупинка не кінцева на t_path
			
	}
console.log(r,'lastStatioins='+ lastStatioins, t_path[progress_2[r]].id_station,'lastSt_2='+lastSt_2[r]);
	while(start_diner_2[r] <= stop_step_2) {				// розрахунок затримки - sim_step - к-сті точок затримки
     		division_price = Math.abs(division_price);
              	start_diner_2[r] = start_diner_2[r]+division_price;
            	sim_step_2[r]++;
	}
		let start_din = parseFloat(start_diner_2[r]);
                start_diner_2[r] = start_din.toFixed(2);
 
	stop_din = din; 
		if (r === 1) {
console.log(r,stop_din,'stations_id_diner=' +tabls[r][din].name,'sim_s='+sim_step_2[r],'stop_s='+stop_step_2,'lastSt_2='+lastSt_2[r],'sim_step_step_2='+sim_step_step_2[r],'start_s='+start_diner_2,'id_diner='+tabls[r][din].stations_id_diner,'end='+tabls[r][din].end_time_diner,'st='+tabls[r][din].start_time_diner);		
          //      division_price = Math.abs(division_price);
            //    start_diner_2 = start_diner_2+division_price;
              //  sim_step_2[r]++;
	
	}
	} 
//----------------------------------------- Зупинка кінцева не обіду -------------------------------------------
//	console.log(r,'lastStatioins='+ lastStatioins, t_path[progress_2[r]].id_station);
	
	if (lastStatioins === t_path[progress_2[r]].id_station && tabls[r][din].start_time_diner === 0) {
		stop_step_2 = tabls[r][din+1].time - tabls[r][din].time;  // Цикл часу затримки на зупинці
//console.log(r,'lastStatioins='+ lastStatioins, t_path[progress_2[r]].id_station, stop_step_2, tabls[r][din+1].time, tabls[r][din].time, updating_din_off);
                                lastSt_2[r] = 1;                                         // зупинка кінцева обіду на t_path
             while(start_diner_2[r] <= stop_step_2) {                                // розрахунок затримки - sim_step - к-сті точок затримки
                division_price = Math.abs(division_price);
                start_diner_2[r] = start_diner_2[r]+division_price;
                sim_step_2[r]++;
        }
                let start_din = parseFloat(start_diner_2[r]);
                start_diner_2[r] = start_din.toFixed(2);
din = din - 1;
	updating_din_off[r] = 1;
//		updating_prog[r] = 0;
        stop_din = din;             
console.log(r,'lastStatioins='+ lastStatioins, t_path[progress_2[r]].id_station, stop_step_2, tabls[r][din+1].time, tabls[r][din].time,'off='+updating_din_off);
			}

//------------------------------ din++ та видача ----------------------------------------------------------------------------
//	        din++;
//        storedDin[r] = din;
	var totalSeconds = tabls[r][din].time;
var hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
var minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
var seconds = String(totalSeconds % 60).padStart(2, '0');
const line_time = `${hours}:${minutes}:${seconds} год.`;
	if (r === 1) {       
console.log(r,stop_din,'din='+din,'progress_2=' +progress_2[r],'sim_s='+sim_step_2,'start_s='+start_diner_2,time_day, line_time, tabls[r][din].name, t_path[progress_2[r]].id_station, tabls[r][din].stations_id_diner, t_path[progress_2[r]].name, updating_din[r], t_path[progress_2[r]].point,'off='+updating_din_off);
		}
	din++; 
	storedDin[r] = din; 
//	console.log(r,'din_ss='+din, tabls[r][din].name,'prost='+prostitute);
} 
//---------------------------- Обід- --------------------------------------------------------------
	if (sim_step_2[r] <= 0) {
//		console.log(r,'din_1='+din,'progress_2_1=' +progress_2[r],sim_step_2[r]);
	if(sim_step_step_2[r] === 1) {
		console.log(r,time_day,'din_22='+din,'progress_2_2=' +progress_2,'lastSt_2='+lastSt_2[r],'sim_step_step_2='+sim_step_step_2[r]);

	if (lastSt_2[r] != 1 ) {									// зупинка не кінцева
       // 	updating_din[r] = Math.trunc(start_diner_2[r]);
		progress_2[r] = progress_2[r] + point_diner_2[r] -1;
                        point_2 = t_path[progress_2[r]];
		markers[`marker_${w}`].setPosition(point_2);
updating_prog[r] = Math.trunc(start_diner_2[r])-2 - point_diner_2[r];

//	updating_din[r] = Math.trunc(start_diner_2[r]) - point_diner_2[r]+1;
updating_din[r] = point_diner_2[r]+1;
		din = stop_din+2;
		console.log(r,stop_din,'din_не кінцева='+din, tabls[r][din].name,updating_din[r],'up_pr='+updating_prog[r],'progress_2_3=' +progress_2,sim_step_2[r],'lastSt_2='+lastSt_2[r],'sim_step_step_2='+sim_step_step_2[r],'start_s='+start_diner_2[r],point_diner_2[r]);
}else{							// зупинка кінцева

//        console.log(r,stop_din,'din_кінцева==='+din,'up_prog='+updating_prog[r],'progress_2_4=' +progress_2[r],sim_step_2[r],lastSt_2[r],'t_path'+t_path[progress_2[r]].id,'sss='+sim_step_step_2[r],'up_din='+updating_din[r],'up_din_off='+updating_din_off,start_diner_2[r]);
	progress_2[r] = indexFirstSt -1;
		 progress_stop_2[r] = 0;


	point_2 = t_path[progress_2[r]];
             	markers[`marker_${w}`].setPosition(point_2);
                       din = stop_din+2;
	if (updating_din_off[r] != 1) {
                       updating_din[r] = Math.trunc(start_diner_2[r]);
		}else{
		updating_din_off[r] = 0;
	}
	if (updating_prog_off[r] === 1) {

		if (updating_prog[r] != 0) {
			updating_prog[r] = Math.trunc(start_diner_2[r])-2 + updating_prog[r];
		}else{
			updating_prog[r] =1;
		}
	updating_prog_off[r] =0;
	}else{
updating_prog[r] = Math.trunc(start_diner_2[r])-2 +updating_prog[r];
	}

	console.log(r,stop_din,'din_кінцева='+din,'up_prog='+updating_prog[r],'progress_2_4=' +progress_2[r],sim_step_2[r],lastSt_2[r],'t_path'+t_path[progress_2[r]].id,'sss='+sim_step_step_2[r],'up_din='+updating_din[r],'up_din_off='+updating_din_off,start_diner_2[r]);
console.log(r,'td='+time_day,'sp='+start_point[m],'pr='+progress_2[r],'as='+as,updating_din[r],'in='+indexFirstStation[m],'st='+storedMarker_on[r], start_mark,'pt='+point_t);
	}
	}
	lastSt_2[r] = 0;
//	storedDin[r] = din;
	sim_step_step_2[r] = 0;
	start_diner_2[r] = 0;
//if (r === 1 && lastSt_2[r] === 1) {
//console.log(r,'din_пості='+din,'progress_2_4=' +progress_2[r],'td='+time_day,'sp='+start_point[m],'as='+as,updating_din[r],'up_prog='+updating_prog[r],'in='+indexFirstStation[m],'st='+storedMarker_on[r], start_mark);
//}
markers[`marker_${w}`].setPosition(point_2);
	}else{											// створення затримкм маркера на sim_step_2
		sim_step_2[r] = sim_step_2[r]-1;
		progress_2[r] = progress_stop_2[r];
		point_2 = t_path[progress_2[r]];
		sim_step_step_2[r] = 1;
storedDin[r] =  progress_2[r];
	//	updating_din[r]++;
	}
//------------------------------------------------------------------------------------------------
//		markers[`marker_${w}`].setPosition(point_2);
}
}
}
//console.log(r,'din_='+din, tabls[r][din].name);'st_D='+storedDin,'st_M='+storedMarker_on,'prost='+prostitute,'cycle=' +storedCycle,
const simulat1 = simulat();
//const simulat2 = simulat();
//const simulat3 = simulat();

simulat1(time_day, 1, start_point, 1, 1, markers, tabls);
//simulat2(time_day, 2, start_point, 2, 2, markers, tabls);
//simulat3(time_day, 3, start_point, 3, 3, markers, tabls);
}

//----------------------------------------- Анімація ---------------------------------------------------------------------------
var sim_step=0;
var sim_step_step = 0;
var stop_step=1; 
var start_diner =0;
var m22=0;
var m210=0;
var marker_sim_step=0;
var tabls_ago =0;   // для підахунку к-сті кроків progress пройшло після початку обіду
var progress_stop =0;   // зберігає значення progress до обіду
var t_path_ago =0;
//var ri_tabl =0; 
//var ri_path =0;
var lastSt = 0;  
var point_diner=0; 		// к-сть точок обіду
var r =1;
var w =6; 
var start =0;
start =k;


animateBus(k, 0, 0, markers, tabls);
	j=0; 
	
//        var progress_0 =5577; 
function animateBus( start, w, r, markers, tabls) {		
	// симуляція

  if (!isSimulating) {
     console.log('isSimulating_if)=' +isSimulating);
    return; // Зупинити симуляцію
  }
  console.log('isSimulating)=' +isSimulating);
        if ( j <= tabls[r].length - 1) {				// Графік tabls[0] - 1 
let progress = start;							// точка старту
let progress_1 = start; 
time_day = start;
	i=start-1;
let delay = 0; 	  							// час чекання на зупинках 0
let progress_1_min =0 ; 
let lastTime = null; 
function animate(timestamp) {				//  вирахування затримки на точках
     
     if (!lastTime) {
    		lastTime = timestamp;
  	}
		const deltaTime = timestamp - lastTime;
 
  	if (deltaTime > delay) {
    		progress++;
		progress_1++;
		time_day++;
    	if (progress >= t_path.length) {
  		progress = 0;
    	}
        if (progress_1 >= t_path.length) {
                progress_1 = 0;
          i=0;
        }

		var point = t_path[progress];
		var point_1 = t_path[progress_1];	  
	if (t_path[i] && t_path[i].id_station){	// знаходження зупинок
		var v_km;

//console.log('i_1=' +i,'j=' +j,'progress='+progress,'progress_1='+progress_1,'t_path[i].id='+t_path[i].id, tabls[r][j].name, t_path[i].name);	
	if (t_path[i].id_station === tabls[r][j].stations_id_diner ) {  // Знаходження Обідів для розрахунку швидкості в обід (:
		var time_diff = tabls[r][j].end_time_diner - tabls[r][j].start_time_diner;  //  
		v_km = t_path[i].s_stops / time_diff; 
		v_km = v_km * 3.6; 
}else{
          	v_km = t_path[i].v_stops * 3.6;

if (isNaN(v_km)) {
  // значення v_km не є числом
        v_km =0;
}
}
	v_km = v_km.toFixed(2);
totalSeconds = tabls[r][j].time;					// видача часу зупинки на екран
hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2,'0');
seconds = String(totalSeconds % 60).padStart(2,'0');
	  const myVariable = `${hours}:${minutes}:${seconds} год., ${v_km} км/год., ${t_path[i].s_stops} м.\n${tabls[r][j].name}\n${lastDist} м., ${line_time}, ${v_line_km} км/год.`;
const myVariableLines = myVariable.split('\n');
const line1 = myVariableLines[0];  					// стрічки видачі на екран
const line2 = myVariableLines[1]; 
const line3 = myVariableLines[2];  
var v1 = progress - progress_1;     
//	console.log('i_22=' +i,'j=' +j,'path[i].id='+t_path[i].id,'division_price=' +division_price,'progress='+progress,'progress_1='+progress_1,'tabls_ago='+tabls_ago,'v1=p-p_1='+v1,'t_ego=' +t_path_ago, myVariable, tabls[r][j].stations_id, t_path[i].id_station, tabls[r][j].time, tabls[r][j].start_time_diner, tabls[r][j].end_time_diner, tabls[r][j].stations_id_diner);
const myDiv = document.getElementById("myDiv"); 
// Застосування різних кольорів до тексту
const line2HTML = `<span style="color: #000000; font-weight: 600; text-shadow: 1px 1px 1px #ffffff;">${line2}</span><br>`;
myDiv.innerHTML = `${line1}<br>` + line2HTML + `${line3}`;  			// перенесення в HTML 
			//кінцева зупинка на мршруті  
if (t_path[i].id_station != tabls[r][j].stations_id_diner ) {  		// Знаходження Обідів для рощрахунку часу стоянки маркера
lastSt = 0;					// зупинка не кінцева на t_path
//	console.log("i_11=" + lastStatioins, t_path[i].id_station,'lastSt='+lastSt);
        if (start_diner > stop_step) {                                  // Затримка маркера на зупинці
                        start_diner =0;
                        stop_step = 1;
		j = j + tabls_ago-1;
		lastSt = 0;
		console.log('i_2=' +i,'j=' +j,'progress='+progress,'progress_1='+progress_1,'point_diner='+point_diner, "Виконується");
	}
//	ri_tabl=0;  
          }else{
		  if (lastStatioins === t_path[i].id_station) {
				lastSt = 1;   								// зупинка кінцева обіду на t_path	
		  }else{
				lastSt = 0;								// зупинка не кінцева на t_path
		  }

stop_step = tabls[r][j].end_time_diner - tabls[r][j].start_time_diner;  // Цикл часу затримки на зупинці
		  progress_stop = progress_1;
		  point_diner = t_path[i].point;
		  tabls_ago = 0;
//		  ri_tabl = 0;
	while(start_diner <= stop_step) {				// розрахунок затримки - sim_step - к-сті точок затримки
     division_price = Math.abs(division_price);
                start_diner = start_diner+division_price;
                sim_step++;

//          console.log("i_3 Умова виконується" + sim_step,'i=' +i,'j=' +j,'lastSt='+lastSt,'division_price=' +division_price,'progress='+progress,'progress_1='+progress_1,'tabls_ago='+tabls_ago,  t_path_ago,'path[i].id=' +t_path[i].id, start_diner, stop_step, tabls[r][j].time, tabls[r][j].end_time_diner, tabls[r][j].start_time_diner, tabls[r][j].stations_id_diner);
     markers[`marker_${w}`].setPosition(point_1);
     }
}
//----------------------------------- Зупинка кінцева не обіду --------------------------------------------------------------------------------------------------
//console.log('lastStatioins'+lastStatioins, t_path[i].id_station);
                  if (lastStatioins === t_path[i].id_station && tabls[r][j].stations_id_diner === 0) {
                                lastSt = 1;                                                             // зупинка кінцева не обіду на t_path
                  
stop_step = tabls[r][j+1].time - tabls[r][j].time;  // Цикл часу затримки на кінцевій зупинці
                  progress_stop = progress_1;
                  point_diner = t_path[i].point;
                  tabls_ago = 0;
//console.log('lastStatioins'+lastStatioins, t_path[i].id_station, stop_step, tabls[r][j].time, tabls[r][j+1].time);
        while(start_diner <= stop_step) {                               // розрахунок затримки - sim_step - к-сті точок затримки
     division_price = Math.abs(division_price);
                start_diner = start_diner+division_price;
                sim_step++;

	//		 console.log("i_3 Умова виконується" + sim_step,'i=' +i,'j=' +j,'lastSt='+lastSt,'division_price=' +division_price,'progress='+progress,'progress_1='+progress_1,'tabls_ago='+tabls_ago,  t_path_ago,'path[i].id=' +t_path[i].id, start_diner, stop_step, tabls[r][j].time, tabls[r][j].end_time_diner, tabls[r][j].start_time_diner, tabls[r][j].stations_id_diner);
			 }
		  }
                             



   tabls_ago++;
j++;
    }
//     ri_tabl++;

     if (sim_step <= 0) {
     	if(sim_step_step === 1) {
		if (lastSt != 1 ) {				// зупинка не кінцева
//console.log('i_14=' +i,'j=' +j,'lastSt='+lastSt,'progress='+progress,'progress_1='+progress_1,'t_path_ago='+t_path_ago, "sim_step_step=" +sim_step_step, "Виконується");
                        progress_1 = progress_1 + point_diner -1;
                        point_1 = t_path[progress_1];
		markers[`marker_${w}`].setPosition(point_1); 
			sim_step_step = 0; 
			i= progress_1-1;
			t_path[i] = t_path[progress_1-1]; 
		
//console.log('i_4=' +i,'j=' +j,'lastSt='+lastSt,'progress='+progress,'progress_1='+progress_1,'t_path_ago='+t_path_ago,'point_diner='+point_diner,"sim_step_step=" +sim_step_step,'t_path[i].id='+t_path[i].id,"Виконується");
		}else{						// зупинке кінцева
			progress_1 = indexFirstSt -1;
                        point_1 = t_path[progress_1];
                  markers[`marker_${w}`].setPosition(point_1);
                        sim_step_step = 0;
                        i= progress_1;
                        t_path[i] = t_path[progress_1];
                        start_diner =0;
                        stop_step = 1;
               // 	t_path_ago = ri_tabl;
                	j = j - tabls_ago +1; 
//			console.log('i_5_1=' +i,'j=' +j,'lastSt='+lastSt,'progress='+progress,'progress_1='+progress_1,'t_path_ago='+t_path_ago, "sim_step_step=" +sim_step_step,'t_path[i].id='+t_path[i].id,"Виконується");
		}
		}
//	     console.log(i,'j='+j,'progress_1=' +progress_1, point_1);
     markers[`marker_${w}`].setPosition(point_1);
     }else{						// створення затримкм маркера на sim_step
		sim_step = sim_step-1;			
    		progress_1 = progress_stop;
   		point_1 = t_path[progress_1];
i= progress_1;
sim_step_step = 1;

// console.log('i_6=' +i,'j=' +j,'lastSt='+lastSt,'progress='+progress,'progress_1='+progress_1,"sim_step=" +sim_step,tabls[r][j].name,'t_path_ago='+t_path_ago); //'t_path[i].id='+t_path[i].id);
}
//console.log('i_15=' +i,'j=' +j,'progress='+progress,'progress_1='+progress_1,tabls[r][j].name,'t_path_ago='+t_path_ago); //'t_path[i].id='+t_path[i].id);

simulationBus(time_day);

//progress_0 = progress_1+300;
//   let point_0 = t_path[progress_0];
//                  markers.marker_0.setPosition(point_0);

    lastTime = timestamp;
  }
i++;
 if (isSimulating) {
requestAnimationFrame(animate);
     }
     }
 if (isSimulating) {
requestAnimationFrame(animate);
     }
     }
}


/*
	let m2=0;
  
	  if (progress >= 6098) {
		progress = progress - 540;
		point = t_path[progress];
	  marker2.setPosition(point);
		progress = progress + 540;
        	point = t_path[progress];
	  }else if (progress >= 0 && progress <= 540 ) { 
		m2 = progress;
		progress = 8241 - 540 + progress;
		point = t_path[progress];
         marker2.setPosition(point);
	        progress = m2;
        	point = t_path[progress];
		m22 =1;	  
	  }else if (progress > 540 && m22 === 1 ) {
                m2 = progress;
                progress = progress - 540;
		point = t_path[progress];
          marker2.setPosition(point);
                progress = m2;
        	point = t_path[progress];
	  }

          let m10=0;
          if (progress >= start_point_І) {
                progress = progress - start_point;
                point = t_path[progress];
          marker10.setPosition(point);
                progress = progress + start_point;
                point = t_path[progress];
          }else if (progress >= 0 && progress <= start_point ) {
                m10 = progress;
                progress = 8241 - start_point + progress;
                point = t_path[progress];
         marker10.setPosition(point);
                progress = m10;
                point = t_path[progress];
                m210 =1;
          }else if (progress > start_point && m210 === 1 ) {
                m10 = progress;
                progress = progress - start_point;
                point = t_path[progress];
          marker10.setPosition(point);
                progress = m10;
                point = t_path[progress];
          }



	progress = progress + 2500;
        point = t_path[progress];
                marker4.setPosition(point);
        progress = progress - 2500;
        point = t_path[progress];
	  
	progress = progress + 3500;
        point = t_path[progress];
                marker5.setPosition(point);
        progress = progress - 3500;
        point = t_path[progress];
*/

}

initMap();
    </script>
   </body>
</html>

