<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">

    <script data-require="jquery@*" data-semver="2.2.0" src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
    <script data-require="jquery-easing@*" data-semver="0.1.3" src="//cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>


<script src="https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyBi83mZ1Jd1UxsupafGhlswoUPGk3Iy1GM&language=uk&callback=initMapi"></script>

<script src="https://code.createjs.com/1.0.0/tweenjs.min.js"></script>


<!--
    <script data-require="marker-animate@*" data-semver="0.2.8" src="https://cdnjs.cloudflare.com/ajax/libs/marker-animate-unobtrusive/0.2.8/vendor/markerAnimate.js"></script>
    <script data-require="marker-animate-unobtrusive@*" data-semver="0.2.8" src="https://cdnjs.cloudflare.com/ajax/libs/marker-animate-unobtrusive/0.2.8/SlidingMarker.min.js"></script>

	<script src="https://cdn.sobekrepository.org/includes/gmaps-markerwithlabel/1.9.1/gmaps-markerwithlabel-1.9.1.min.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
	-->

<style>
	#map { height: 700px; }

 html,
body {
      /*     top: 55px }  &libraries=drawing&region=uk  */
  margin: 0;
  padding: 0;
 }   
/*   .fixedbut {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 5;
    display: block;
    background: #2db700;
    color: #fff;
    text-decoration: none;
    padding: 6px 23px;
    font-size: 17px;
    }
   .fixedbut:hover {
    background: #222;
    } */
   #floating-panel {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 5;
    display: block;
    background: #2db700;
    color: #fff;
    text-decoration: none;
    padding: 6px 23px;
    font-size: 17px;
    }
   #floating-panel:hover {
    background: #222;
    }    
   #floating-help {
    position: fixed;
    top: 40%;
    left: 35%;
    box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.5);
    z-index: 5;
    display: block;
    color: #fff;
    text-decoration: none;
    padding-top: 0;
    font-size: 17px;
    }
   .labels {
// transform: rotate(20deg);
     color: black;
     background-color: white;
/*     font-family: "Lucida Grande", "Arial", sans-serif;*/
     font-size: 12px;
     font-weight: bold;
     text-align: center;
     width: auto;     
     border: 2px solid black;
     white-space: nowrap;
     padding: 0 2px 0 2px;
   }

</style>
</head>
[% IF session.logged_in %]
<body>

    <div id="floating-panel">

   <!--   	<input id="remove-line" class="btn btn-warning btn-sm" type="button" value="Крок (-)" />		
      	<input id="add-line" class="btn btn-primary btn-sm" type="button" value="Лінія" />
 -->
[% msg %]
	<button id="js-toast-trigger" type="button" class="btn btn-info btn-sm">

<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-lg" viewBox="0 0 16 16">
  <path d="m9.708 6.075-3.024.379-.108.502.595.108c.387.093.464.232.38.619l-.975 4.577c-.255 1.183.14 1.74 1.067 1.74.72 0 1.554-.332 1.933-.789l.116-.549c-.263.232-.65.325-.905.325-.363 0-.494-.255-.402-.704l1.323-6.208Zm.091-2.755a1.32 1.32 0 1 1-2.64 0 1.32 1.32 0 0 1 2.64 0Z"/>
</svg>    

	</button>    
	<a href="/" class="btn btn-warning btn-sm">Вихід</a>
   </div>

<div id="floating-help" class="d-flex align-items-center">
    <div id="liveToast" class="toast align-items-center text-bg-primary border-0" role="alert" aria-live="assertive" aria-atomic="true" class="toast" data-bs-autohide="false">

   	<div class="toast-header">

		<div class="rounded me-2">
<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle-fill" viewBox="0 0 16 16">
  <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
</svg>
		</div>
                	<strong class="me-auto">Довідка</strong>
                	<small>Друк мапи</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    	</div>
                        <div class="toast-body"> 
	  Відкрити карту на весь екран.
	Esc - відміна переносу лейби до кліку.
	Вибрати необхідний зум.
	Вирізати кліп "Ножницями" та зберегти в документі. 
                                </div>
    </div>
</div>

 <script>
		var toastTrigger = document.getElementById('js-toast-trigger')
		var toastLiveExample = document.getElementById('liveToast')
	if (toastTrigger) {
  			toastTrigger.addEventListener('click', function () {
    			var toast = new bootstrap.Toast(toastLiveExample)
    	toast.show()
  	})
}
</script>

	<div id="map"></div> 

<form id="track_map" action="/print_map" method=post>

<script>
 // language="javascript">


//var map;

  	function initMap()

{

var map;
var mas = [];
var mss = [];
let lines_sum = [];
let table_sum = [];
let lines_gis_s = [];
let dist_m = [];
var a = 0;
var i = 0;

// Вставка масиву у JavaScript код через шаблон Template Toolkit 

var arr = [];
[% FOREACH stop IN lines_gis %]
    var obj = {};
  obj.num_next_segment = [% stop.num_next_segment %],
  obj.distance_stops_two = [% stop.distance_stops_two %],
  obj.lng = [% stop.lng %],
  obj.id_station = [% stop.id_station %],
  obj.id_line = [% stop.id_line %],
  obj.distance_stops = [% stop.distance_stops %],
  obj.radio_pzz = [% stop.radio_pzz %],
  obj.distance_line = [% stop.distance_line %],
  obj.lat = [% stop.lat %],
  obj.distance_line_two = [% stop.distance_line_two %]

    arr.push(obj);

		[% END %]


var arr2 = [];
[% FOREACH stop2 IN track %]
    var obj2 = {};
  obj2.num_next_segment = [% stop2.num_next_segment %],
  obj2.lng = [% stop2.lng %],
  obj2.id_station = [% stop2.id_station %],
  obj2.id = [% stop2.id %],
//  obj2.distance_stops = [% stop2.distance_stops %],
  obj2.radio_pzz = [% stop2.radio_pzz %],
  obj2.distance_line = [% stop2.distance_line %],
  obj2.lat = [% stop2.lat %],
  obj.distance_line_two = [% stop2.distance_line_two %]
  
    arr2.push(obj2);

                [% END %]


//console.log(arr[0].id_line);

[% FOREACH i = hash %]
	mas[a] = [% i %]
	a = a +1;
[% END %]

a = 0;
[% FOREACH i = table %]
        table_sum[a] = [% i %]
        a = a +1;
[% END %]

lines_ss = arr;
var track_ss = arr2;
mss = JSON.parse(JSON.stringify(mas));
var table_ss = JSON.parse(JSON.stringify(table_sum));

	var path = [];

var latlng = { lat: 50.74520809060286, lng: 25.319942873915547 };
 
var element = document.getElementById("map");
var options = {
        zoom: 15,
        center: latlng,
};
var map = new google.maps.Map(element, options);
	// Область показу маркерів для центрування карти
	var mssBounds = new google.maps.LatLngBounds();


  const flightPlanCoordinates = [];

for (i = 0; i < lines_ss.length; i += 1) {
    flightPlanCoordinates.push(new google.maps.LatLng(lines_ss[i].lat, lines_ss[i].lng));
}


//const flightPlanCoordinates = [lines_ss];
  const flightPath = new google.maps.Polyline({
    path: flightPlanCoordinates,
    geodesic: true,
	    editable: true,
    strokeColor: "#FF0000",
    strokeOpacity: 1.0,
    strokeWeight: 7,
  });
    flightPath.setMap(map);



  var busMarker = new google.maps.Marker({
    positio1n: new google.maps.LatLng(mss[0].lat, mss[0].lng),
    map: map,
  });

var radio_pzz =0;
var  id_station =0;
    for (i = 0; i < lines_ss.length - 1; i++) {

var dis_t = lines_ss[i+1].distance_line - lines_ss[i].distance_line;
var dist = parseFloat(dis_t.toFixed(2));    // заокруглення до 2 зн. результат рядок то перетворюємо рядок на число
	    if (lines_ss[i].radio_pzz != 0) {
		    radio_pzz = lines_ss[i].radio_pzz;
		    id_station = lines_ss[i].id_station;
		    dist_pzz = lines_ss[i].distance_line;
	    }
//	    console.log('dist ='  +i, dist, 'radio_pzz = ' + radio_pzz, id_station); 
    }
var max_dist_line = lines_ss[i].distance_line;
var V_mi_d = max_dist_line/3600;
var V_mid = parseFloat(V_mi_d.toFixed(2));


console.log('max_dist_line ='  +i, max_dist_line,' V=' + V_mid );

    var c =0;
 var previousMarker;
	var dist_two =0;
    	var segment =0;
    	var dist_one = 0;
   	var track = {}; 
    	var previousLatLon;
    var V_animate = 1;   //кадрів в сек. - це кількість анімації в сек. - попугаї швидкости

for (i = 0; i < table_ss.length - 1; i++) {
		
        for (j = 0; j < lines_ss.length - 1; j++) {

    	if (lines_ss[j].id_station == table_ss[i].stations_id) {
			var time_dist = table_ss[i+1].time - table_ss[i].time;
    //		console.log('time_dist ='  +i, time_dist, table_ss[i].time);
//track[j] = { : num_next_segment };
//lines_ss[j].lat 

    		if (lines_ss[j].distance_stops  > 10) {
			dist_one = lines_ss[j].distance_line - lines_ss[j].distance_stops;
		//	console.log('dd_oo='+dist_one);
		} else if ( lines_ss[j].distance_stops  < -10) {
                        dist_one = lines_ss[j].distance_line - lines_ss[j].distance_stops;
                //        console.log('dd_oo1='+dist_one);
                } else {
                        dist_one = lines_ss[j].distance_line;
    		//	console.log('dd_oo2='+dist_one);
                }

		if ( lines_ss[j].distance_stops_two > 10) {						// 10 - к-сть метрів до зупинки (не враховуємо)
                        dist_two = lines_ss[j].distance_line_two - lines_ss[j].distance_stops_two;
		//	console.log('dd_tt='+dist_two);
		} else if (lines_ss[j].distance_stops_two < -10) {
                        dist_two = lines_ss[j].distance_line_two - lines_ss[j].distance_stops_two;
		//	console.log('dd_tt_t='+dist_two);
    		} else {
                        dist_two = lines_ss[j].distance_line_two;
                //        console.log('dd_tt_tt='+dist_two);
                }
    if (typeof j === 'undefined'){
//	j = 0;	
//    console.log('j='+lines_ss[j-1].distance_stops, lines_ss[j].distance_stops, lines_ss[j +1].distance_stops);
    }
//console.log('j='+lines_ss[j-1].distance_stops, lines_ss[j].distance_stops, lines_ss[j +1].distance_stops);
	
			segment = dist_two - dist_one;
			var v_segment = segment/time_dist;
    			var s = lines_ss[j].distance_line_two;
//console.log('ds=' +lines_ss[j].id_station,'dl='+lines_ss[j].distance_line,'dt='+lines_ss[j].distance_line_two,'dw='+dist_one,'d_two='+dist_two, 'ds_two='+lines_ss[j].distance_stops_two, 's='+segment);    

			var numSteps_segment = time_dist * V_animate;   //  кадрів в сек. - це кількість анімації в сек.
 			var stepDeltaLat = (lines_ss[j+1].lat - lines_ss[j].lat) / numSteps_segment;
			var stepDeltaLnt = (lines_ss[j+1].lnt - lines_ss[j].lnt) / numSteps_segment;
track[j] = { numSteps_segment: num_next_segment };



    	var interest = 0;
	c=0;
 	var dl_line = 0;
    	var dl_line_two =0;
    	var nextStop = lines_ss[j];

		while( s > lines_ss[j].distance_line){
  					
			if (lines_ss[j].distance_stops == 0) {
				dl_line = lines_ss[j].distance_line;
			} else {
				dl_line = dist_one;
			}

                        if (lines_ss[j+1].distance_stops_two == 0) {
                                dl_line_two = lines_ss[j+1].distance_line;
                        } else {
                                dl_line_two = dist_two;
                        }

					var next_segment = dl_line_two - dl_line;
					interest = next_segment * 100 /segment;    // швидкість 
					
    					let  num_next_segmen_t = numSteps_segment * interest/100;   // к-сть кроків анімації на N відрізку сегмента
					var num_next_segment = parseFloat(Math.floor(num_next_segmen_t)); // заокруглення до меншого цілого числа
     					if (num_next_segment == 0) {
                                                num_next_segment = 1;
                                        }
	//				lines_ss[j].num_next_segment = num_next_segment;
	//		track[j] = { num_next_segment: num_next_segment };
//					console.log('num' + lines_ss[j].num_next_segment, num_next_segment, j, track[j].num_next_segment );



        c++;
        j++;

                }


/*
								let deltaLa_t = (lines_ss[j+1].lat - lines_ss[j].lat) / num_next_segment; // різниця між початковим та кінцевими значеннями широти
					                        let deltaLn_g = (lines_ss[j+1].lng - lines_ss[j].lng) / num_next_segment;


            	let lat_d = parseFloat(deltaLa_t);
                let lng_d = parseFloat(deltaLn_g);

	var nextStop = lines_ss[j];

let lat_f = parseFloat(nextStop.lat);
let lng_f = parseFloat(nextStop.lng);


	c++;
    	j++;
    					
		}
*/

	}
    }
}



var segment =0;
var c =0;
 var previousMarker;
var c =0;
 var previousLatLon;
var V_animate = 1;   //кадрів в сек. - це кількість анімації в сек. - попугаї швидкости
for (i = 0; i < table_ss.length - 1; i++) {
		
        for (j = 0; j < track_ss.length - 1; j++) {

    	if (track_ss[j].id_station == table_ss[i].stations_id) {

var time_dist = table_ss[i+1].time - table_ss[i].time;
	//	console.log('time_dist ='  +i, time_dist, table_ss[i].time);
		segment = track_ss[j].distance_line_two - track_ss[j].distance_line;
			var v_segment = segment/time_dist;
    			var s = track_ss[j].distance_line_two;

var interest = 0;
		while( s > track_ss[j].distance_line){

var next_segment = track_ss[j+1].distance_line - track_ss[j].distance_line;
			interest = next_segment * 100 /segment;    // швидкість
			    					var numSteps_segment = time_dist * V_animate;   // 25 кадрів в сек. - це кількість анімації в сек.
    					let  num_next_segmen_t = numSteps_segment * interest/100;   // к-сть кроків анімації на N відрізку сегмента
					var num_next_segment = parseFloat(Math.floor(num_next_segmen_t)); // заокруглення до меншого цілого числа
			     					if (num_next_segment == 0) {
                                                num_next_segment = 1;
                                        }
					track_ss[j].num_next_segment = num_next_segment;
			        c++;
        j++;

		}

	}
}
}

/*
  const map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: 50.7568376183486, lng: 25.3450718375684 },
    zoom: 6,
    mapTypeId: "terrain",
  });
*/

  // Define the symbol, using one of the predefined paths ('CIRCLE')
  // supplied by the Google Maps JavaScript API.
  const lineSymbol = {
    path: google.maps.SymbolPath.CIRCLE,
    scale: 8,
    strokeColor: "#393",
  };

/*
var tr=0;
var pach = {};
for (i = 0; i < track_ss.length - 1; i++) {
pach[i] = {lat: track_ss[i].lat, lng: track_ss[i].lng};
//	console.log(track_l[i].lat);
}
*/
var path = [
    { lat: 50.7568376183486, lng: 25.3450718375684 },
    { lat: 50.758291, lng: 25.349900 },
    { lat: 50.7608376183486, lng: 25.3550718375684 },
];

// Create the polyline and add the symbol to it via the 'icons' property.
  const line = new google.maps.Polyline({
    path: pach,
    icons: [
      {
        icon: lineSymbol,
        offset: "100%",
      },
    ],
    map: map,
  });

  animateCircle(line);
}

// Use the DOM setInterval() function to change the offset of the symbol
// at fixed intervals.
function animateCircle(line) {
  let count = 0;

  window.setInterval(() => {
    count = (count + 1) % 200;

    const icons = line.get("icons");

    icons[0].offset = count / 2 + "%";
    line.set("icons", icons);
  }, 20);




/*

//if (typeof j === 'undefined') {
const numLines = track_ss.length;
	console.log('к-сть ел.'+numLines);

	var previousMarker;
	var start;
	var index = 1;
function moveBus(currentTime) {
 		s = track_ss[index].distance_line_two;

//	while( s > track_ss[index].distance_line){
        if (track_ss.length-2 <= index){
                index = 0;
        }
      		index++;
console.log('l_ss', index, currentTime, track_ss[index].num_next_segment, s );


    		var nextStop = track_ss[index];
 	busMarker =  new google.maps.Marker({
    		position: new google.maps.LatLng(track_ss[index+1].lat, track_ss[index+1].lng),
    		map: map,
//		draggable: true,
 		icon: '/images/bus20.png',
	});


//	if ( table_ss[index].time > currentTime + 20 ) { currentTime = table_ss[index].time - 20};
//		currentTime = table_ss[index].time;
	 										
	if (index == 0 ) { 
		index = 1;
	}
//console.log('lines_ss = ' + lines_ss[index].lat, lines_ss[index].lng, lines_ss[index].distance_line, lines_ss[index].distance_stops, table_ss[index].time, index);

// розрахунок координат маркера в кожному кроці анімації
	var numSteps = track_ss[index].num_next_segment; // кількість кроків анімації
	var step1 = 0; // поточний крок анімації
	let deltaLat = (track_ss[index+1].lat - nextStop.lat) / numSteps; // різниця між початковим та кінцевими значеннями широти
	let deltaLng = (track_ss[index+1].lng - nextStop.lng) / numSteps; // різниця між початковим та кінцевими значеннями довготи
let lat_f = parseFloat(nextStop.lat);
let lng_f = parseFloat(nextStop.lng);
            let lat_d = parseFloat(deltaLat);
                let lng_d = parseFloat(deltaLng);

//const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
//async function animateMarker() {
//await sleep(3000);

	function delay(milliseconds){
    return new Promise(resolve => {
        setTimeout(resolve, milliseconds);
    });
}

// запуск анімації
animateMarker();

function animateMarker() {
  	if (step1 < numSteps) {
		lat_f = lat_f + lat_d;
		lng_f = lng_f + lng_d;
	  		lat =  lat_f;
	  		lng =  lng_f;
//console.log('lines_ss2 = ' + lat.toFixed(10), lng.toFixed(10), deltaLat, deltaLng, step1, index);
	//	google.maps.event.addListener(busMarker, 'dragend', function() {

//				busMarker.setPosition(new google.maps.LatLng(lat, lng));
  // 				map.panTo(busMarker.getPosition()); // змінити центр карти на положення маркера
//	    			step1++;
   // });


//	console.log('a1 = ' + numSteps, step1, index, numSteps);
//	if (step1 === 10) {



//setTimeout(function(){
  //  console.log("Executed after 1 second");
//}, 1000);

//await delay(2000);
//	}
step1++;
    setTimeout(animateMarker, 50); // час паузи між кроками анімації
//	animateMarker();
  		} else {
    	busMarker.setAnimation(null); // зупинка анімації маркера
  	}
}
		lat = nextStop.lat;// * (nextStop.lat - lines_ss[index-1].lat);
		lng = nextStop.lng;// * (nextStop.lng - lines_ss[index-1].lng);
	 if (previousMarker) {
  		previousMarker.setMap(null);
	}
	 busMarker.setPosition(new google.maps.LatLng(lat, lng));
         if (previousMarker) {
                previousMarker.setMap(null);
        }
	previousMarker = busMarker;

		map.panTo(busMarker.getPosition()); // змінити центр карти на положення маркера									
currentTime++;
//}
   	 setTimeout(function() { moveBus(currentTime); }, 1200);

//moveBus(currentTime);
}
  // Start the simulation
  moveBus(0);

*/

/*
var markers = [];
for (var i = 0; i<= mss.length; i++)

        {

         markers[i] = new google.maps.Marker({
                position: new google.maps.LatLng(mss[i].lat, mss[i].lng),
                title: mss[i].name,
                map: map,
                buborek: mss[i].name,
                icon: '/images/bus2_stops.png',
        });
	    }
*/
/*

*/


}



initMap(); //initMap();   window.initialize = initMap();



</script>

 <!--
-->



 </form>
</body>
[% ELSE %]

<h1>Назва шаблону: [% response.template %]</h1>
                <div id="floating-help" class="d-flex align-items-center">
                        <div class="toast align-items-center text-bg-primary border-0" role="alert" aria-live="assertive" aria-atomic="true" class="toast" data-bs-autohide="false">
                                <div class="toast-header">

                                        <div class="rounded me-2">

<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle-fill" viewBox="0 0 16 16">
  <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
</svg>
                                        </div>

                        <strong class="me-auto">Довідка</strong>
                        <small>Друк мапи</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                                </div>
                                <div class="toast-body">
          На екрані приклад прорамно-створеної мапи.
        Вам лишається лише видати на друк дане зображення маршруту.
        Для вирішення шляхів використання системи МАК-ОМ Вам необхідно відправити реестраційні дані.
                                <div class="mt-2 pt-2 border-top">
        <a href="[% logout_url %]" type="button" class="btn btn-warning btn-sm">Реестрація</a>
        <a href="[% logout_url %]" type="button" class="btn btn-dark btn-sm">Вихід</a>
                                </div>
                       </div>
                </div>
        </div>

 <script>

window.onload = (event) => {
  let myAlert = document.querySelectorAll('.toast')[0];
  if (myAlert) {
    let bsAlert = new bootstrap.Toast(myAlert);
    bsAlert.show();
  }
};

 </script>



                <img src="/images/52.png" class="d-block w-100" alt="...">



[% END %]

</html>

